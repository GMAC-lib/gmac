option(MAKE_INSTALLER "Generate installer" OFF)

if(MAKE_INSTALLER)
    set(CPACK_PACKAGE_VENDOR "Multicoreware Inc.")
    set(CPACK_PACKAGE_VERSION ${GMAC_VERSION})
    set(CPACK_RESOURCE_FILE_LICENSE ${CMAKE_CURRENT_SOURCE_DIR}/LICENSE.txt)

    list(GET GMAC_TARGET_NAME 0 GMAC_TARGET_SHORT_NAME) 

    if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    	set(INSTALLER "win" CACHE STRING "Installer type")
    elseif(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    	set(INSTALLER "mac" CACHE STRING "Installer type")
    else(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    	set(INSTALLER "deb" CACHE STRING "Installer type")
    endif(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	
    if(INSTALLER MATCHES "deb")
        message(STATUS "Generating Debian package")
        set(CPACK_DEBIAN_PACKAGE_MAINTAINER "Isaac Gelado <isaac@multicorewareinc.com>")
        set(CPACK_DEBIAN_PACKAGE_NAME "lib${GMAC_TARGET_SHORT_NAME}")
        set(CPACK_DEBIAN_PACKAGE_DESCRIPTION "Library for easy OpenCL development")
        set(CPACK_DEBIAN_PACKAGE_SECTION "libs")

        set(CPACK_DEBIAN_PACKAGE_VERSION "${GMAC_VERSION}")

        if(${CMAKE_SYSTEM_PROCESSOR} MATCHES "x86_64")
            set(GMAC_ARCH "amd64")
        elseif(${CMAKE_SYSTEM_PROCESSOR} MATCHES "i686")
            set(GMAC_ARCH "i386")
        endif(${CMAKE_SYSTEM_PROCESSOR} MATCHES "x86_64")

        set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE ${GMAC_ARCH})

        set(CPACK_PACKAGE_FILE_NAME "lib${GMAC_TARGET_SHORT_NAME}_${GMAC_VERSION}_${GMAC_ARCH}")
    elseif(INSTALLER MATCHES "rpm")
        message(STATUS "Generating RPM package")
        # set(CPACK_RPM_COMPONENT_INSTALL ON)
        # set(CPACK_COMPONENTS_ALL libraries headers)

        # set(CPACK_COMPONENT_LIBRARIES_GROUP "lib")
        # set(CPACK_COMPONENT_HEADERS_GROUP "devel")

        set(CPACK_RPM_PACKAGE_NAME "lib${GMAC_TARGET_SHORT_NAME}")
        set(CPACK_RPM_PACKAGE_SUMMARY "Library for easy OpenCL development")
        set(CPACK_RPM_PACKAGE_DESCRIPTION "Library for easy OpenCL development")
        set(CPACK_RPM_PACKAGE_GROUP "Development/Libraries")

        set(CPACK_RPM_PACKAGE_VERSION "${GMAC_VERSION}")

        if(${CMAKE_SYSTEM_PROCESSOR} MATCHES "x86_64")
            set(GMAC_ARCH "x86_64")
        elseif(${CMAKE_SYSTEM_PROCESSOR} MATCHES "i686")
            set(GMAC_ARCH "i386")
        endif(${CMAKE_SYSTEM_PROCESSOR} MATCHES "x86_64")

        set(CPACK_RPM_PACKAGE_ARCHITECTURE ${GMAC_ARCH})

        set(CPACK_PACKAGE_FILE_NAME "${GMAC_TARGET_SHORT_NAME}_${GMAC_VERSION}.${GMAC_ARCH}")
    elseif(INSTALLER MATCHES "win" OR INSTALLER MATCHES "mac")
        message(STATUS "Generating package with components")

    	if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
            set(CPACK_COMPONENTS_ALL libraries runtime headers documentation samples)

            set(CPACK_COMPONENT_LIBRARIES_DISPLAY_NAME "GMAC development library")
            set(CPACK_COMPONENT_RUNTIME_DESCRIPTION "GMAC DLL needed to run programs that use GMAC")

            set(CPACK_COMPONENT_RUNTIME_DISPLAY_NAME "GMAC run-time library")
            set(CPACK_COMPONENT_LIBRARIES_DESCRIPTION "GMAC LIB file needed to develop programs that use GMAC")

            set(CPACK_COMPONENT_RUNTIME_INSTALL_TYPES Runtime Developer)
            set(CPACK_COMPONENT_LIBRARIES_INSTALL_TYPES Developer)
    	else(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
            set(CPACK_COMPONENTS_ALL libraries headers documentation samples)

            set(CPACK_COMPONENT_LIBRARIES_DISPLAY_NAME "GMAC library")
            set(CPACK_COMPONENT_LIBRARIES_DESCRIPTION "GMAC library needed to run programs that use GMAC")

            set(CPACK_COMPONENT_LIBRARIES_INSTALL_TYPES Runtime Developer)
    	endif(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

        set(CPACK_COMPONENT_HEADERS_DISPLAY_NAME "GMAC headers")
	    set(CPACK_COMPONENT_DOCUMENTATION_DISPLAY_NAME "GMAC user manual")
	    set(CPACK_COMPONENT_SAMPLES_DISPLAY_NAME "GMAC samples")

        set(CPACK_COMPONENT_HEADERS_DESCRIPTION "GMAC header files needed to develop programs that use GMAC")
	    set(CPACK_COMPONENT_DOCUMENTATION_DESCRIPTION "GMAC user manual in PDF")
	    set(CPACK_COMPONENT_SAMPLES_DESCRIPTION "GMAC sample source code")

        set(CPACK_ALL_INSTALL_TYPES Developer Runtime)

        set(CPACK_COMPONENT_HEADERS_INSTALL_TYPES Developer)
	    set(CPACK_COMPONENT_DOCUMENTATION_INSTALL_TYPES Developer)
	    set(CPACK_COMPONENT_SAMPLES_INSTALL_TYPES Developer)

        set(CPACK_COMPONENT_LIBRARIES_GROUP "Development")
        set(CPACK_COMPONENT_HEADERS_GROUP "Development")

    	if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
            if(CMAKE_SIZEOF_VOID_P EQUAL 8) 
                set(GMAC_ARCH "x86_64")
                set(CPACK_PACKAGE_INSTALL_DIRECTORY "gmac-x86_64")
            else()
                set(GMAC_ARCH "x86")
                set(CPACK_PACKAGE_INSTALL_DIRECTORY "gmac-x86")
            endif()

            set(CPACK_NSIS_INSTALL_ROOT "$PROFILE")
            #set(CPACK_NSIS_EXTRA_INSTALL_COMMANDS "")
            set(CPACK_NSIS_PACKAGE_NAME "GMAC ${GMAC_VERSION}")
            #set(CPACK_NSIS_MUI_ICON "${CMAKE_SOURCE_DIR}/installer/logo.ico")
            #set(CPACK_NSIS_MUI_UNIICON "${CMAKE_SOURCE_DIR}/installer/logo.ico")
            set(CPACK_PACKAGE_ICON "${CMAKE_SOURCE_DIR}\\\\installer\\\\mcw-logo.bmp")
            set(CPACK_NSIS_CONTACT "isaac@multicorewareinc.com")
            #set(CPACK_NSIS_MODIFY_PATH ON)
    	else(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
            if(CMAKE_SIZEOF_VOID_P EQUAL 8 AND NOT USE_32BITS)
                set(GMAC_ARCH "x86_64")
            else()
                set(GMAC_ARCH "x86")
            endif()
            
            set(CPACK_PACKAGING_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})
        endif(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

        set(CPACK_PACKAGE_FILE_NAME "${GMAC_TARGET_SHORT_NAME}-${GMAC_VERSION}.${GMAC_ARCH}")

    elseif(INSTALLER MATCHES "tgz")
        if(${CMAKE_SYSTEM_PROCESSOR} MATCHES "x86_64")
            set(GMAC_ARCH "amd64")
        elseif(${CMAKE_SYSTEM_PROCESSOR} MATCHES "i686")
            set(GMAC_ARCH "i386")
        endif(${CMAKE_SYSTEM_PROCESSOR} MATCHES "x86_64")

        set(CPACK_COMPONENTS_GROUPING "ALL_COMPONENTS_IN_ONE")
        set(CPACK_PACKAGE_FILE_NAME "${GMAC_TARGET_SHORT_NAME}_${GMAC_VERSION}_${GMAC_ARCH}")
        set(CPACK_SOURCE_PACKAGE_FILE_NAME "gmac-${GMAC_VERSION}")

    endif(INSTALLER MATCHES "deb")

    set(CPACK_STRIP_FILES TRUE)

    include(CPack)

endif(MAKE_INSTALLER)
